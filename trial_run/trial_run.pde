import processing.serial.*;  // import the Processing serial library

// define limits of flex sensors, and what represents straight 
// and 90 degree lines
final int elbow90Degrees = 320;
final int elbowStraight = 440;
final int elbowMin = 320;
final int elbowMax = 500;

final int wristMin = 285;
final int wristMax = 490;
final int wristStraight = 427;
final int wrist90Degrees = 295;
final int wrist90Degrees2 = 480;

final int armpitMin = 300;
final int armpitMax = 380;

// values generated by the sensors
int wrist;
int elbow;
int armpit;

// values generated by the sensor's previous value
int prevWrist = 0;
int prevElbow = 0;
int prevArmpit = 0;

int counter = 0;

Serial myPort;    // the serial port
boolean firstContact = false;

ArrayList fws = new ArrayList();
Word myWord;
Clock clock;

void setup() {
  size(1000, 600);
  String portName = "COM4";
  myPort = new Serial(this, portName, 9600);
  // read incoming bytes to a buffer until you get a linefeed (ASCII 10)
  myPort.bufferUntil('\n');
  myWord = new Word(64,20,20);
  clock = new Clock();
}

void draw() {
  clock.display();
    
  if(frameCount % 60 == 0) {
    clock.countdown();
  }
  
  if(clock.time == 0){
    text("END", height/2, height/2);
    //TODO - add the score
    noLoop();
  }
  
  fill(0, 30);
  rect(-1, -1, width+1, height+1);
  /*
   Iterate over every FireWork object and draw them. Also check if the firework is dead by
   a boolean statement.
   */
  for (int i = 0; i < fws.size (); i++) {
    FireWork f = (FireWork) fws.get(i);
    f.draw();
    if (f.dead) {
      fws.remove(f);
    }
  }
  
  if ((frameCount % 100) == 0) {
    fws.add(new FireWork(new PVector(random(width), random(height))));
    textSize(64);
    fill(255,0,0);
    text("FIERCE", 50, 50);
  }
  if(wrist == prevWrist) { //&& prevElbow == elbow && prevArmpit == armpit) {
    myWord.display();
    myWord.fade();
  }
  prevWrist = wrist;
  prevElbow = elbow;
  prevArmpit = armpit;
  
  delay(1);
  counter++;
}

void serialEvent(Serial myPort) {
  // read the serial buffer  
  String myString = myPort.readStringUntil('\n');
  if (myString != null) {
    myString = trim(myString);

    // if you haven't heard from the microcontroller yet, listen
    if (firstContact == false) {
      if (myString.equals("hello")) {
        myPort.clear();        // clear the serial port buffer
        firstContact = true;   // you've had first contact from the microcontroller
        myPort.write('A');     // ask for more
      }
    }
    // if you have heard from the microcontroller, proceed
    else {
      // split the string at the commas and convert the sections into integers
      int sensors[] = int(split(myString, ','));

      //for (int sensorNum = 0; sensorNum < sensors.length; sensorNum++) {
        //print("Sensor " + sensorNum + ": " + sensors[sensorNum] + "\t");
      //}
      // add a linefeed at the end
      //println();
      if (sensors.length > 1) {
        wrist = (int)map(sensors[0], 0, 1023, wristMin, wristMax);
        //elbow = (int)map(sensors[1], 0, 1023, elbowMin, elbowMax);
        //armpit = (int)map(sensors[2], 0, 1023, armpitMin, armpitMax);
      }
    }
    // when you've parsed the data you have, ask for more
    myPort.write("A");
  }
}
